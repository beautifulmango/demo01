<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:security="http://www.springframework.org/schema/security"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans.xsd
			    http://www.springframework.org/schema/context
			    http://www.springframework.org/schema/context/spring-context.xsd
			    http://www.springframework.org/schema/aop
			    http://www.springframework.org/schema/aop/spring-aop.xsd
			    http://www.springframework.org/schema/tx
			    http://www.springframework.org/schema/tx/spring-tx.xsd
			    http://www.springframework.org/schema/mvc
			    http://www.springframework.org/schema/mvc/spring-mvc.xsd
			    http://www.springframework.org/schema/security
			    http://www.springframework.org/schema/security/spring-security.xsd">
			    
	<!-- 释放静态资源 -->		
	<security:http security="none" pattern="/login.jsp"></security:http>		    
	<security:http security="none" pattern="/failer.jsp"></security:http>		    
	<!-- 
	auto-config="true" 就表示可以使用security提供默认登录页面，如果自己提供的有登录页面，就用自己的。
	use-expressions="true" 是否使用spring的el表达式。
	<security:intercept-url 标签表示要拦截的角色
	                        pattern="/**" 表示哪些请求需要被拦截，/**所有请求都拦截
	                        access="hasRole('ROLE_USER')" 表示项目中基本角色为ROLE_USER
	                                                                        类似于Oracle中的connect角色，没有此角色，什么都做不了。
	 -->		    
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
		
	
		<!-- 提供自定义的登录页面 
			login-page ： 自定义的登录页面
			login-processing-url ： 登录的处理器路径
			default-target-url ： 登录成功后跳转的页面
			authentication-failure-url ： 登录失败跳转的页面
		-->
		<security:form-login login-page="/login.jsp"
							 login-processing-url="/login"
							 default-target-url="/success.jsp"
							 authentication-failure-url="/failer.jsp"/>
		<!-- 提供退出登录的操作配置 
			invalidate-session ： 清空session
			logout-success-url ： 退出登录后跳转的页面
			logout-url ： 退出登录处理器路径
		-->
		<security:logout invalidate-session="true"
						logout-success-url="/login.jsp"
						logout-url="/logout"/>
		<!-- 关闭csrf拦截:csrf是一个网络攻击技术，security内部认为除了框架内部所有请求都是攻击。 -->
	    <security:csrf disabled="true"/>
		</security:http>		    
	<!-- 在内存中模拟两个用户，一个是user具有ROLE_USER角色，一个是admin有ROLE_ADMIN 
		{noop}表示不加密登录，springSecurity默认登录是加密的。
	-->		
    
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="user" password="{noop}user"
					authorities="ROLE_USER" />
				<security:user name="admin" password="{noop}admin"
					authorities="ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>	

</beans>